The following pointers will help you get started:

=== Dependencies

Required:

* autotools or Cmake to build from source.

* daq from http://www.snort.org for packet IO.

* dnet from http://code.google.com/p/libdnet/ for network utility
  functions.

* LuaJIT from http://luajit.org for configuration and scripting.

* pcap from http://www.tcpdump.org for tcpdump logging.

* pcre from http://www.pcre.org for regex pattern matching.

* zlib from http://www.zlib.net for decompression.

Optional:

* asciidoc from http://www.methods.co.nz/asciidoc/ to build the html
  manual.

* dblatex from http://dblatex.sourceforge.net to build the pdf manual (in
  addition to asciidoc).

* check from http://check.sourceforge.net to build unit tests.

=== Building

* Optionally built features are listed in the reference section.

* You should build Snort++ with --prefix $install_dir where install_dir is
  something you can easily delete.

* To build with autotools, the usual ./configure, make, make install from
  the top level directory will suffice.

* To build with Cmake and make, first create a separate directory for the
  build and cd into that directory.  Then:

    mkdir -p /path/to/my_build
    cd /path/to/my_build
    Cmake /path/to/Snort++

* An alternate method for building with Cmake and make is to run the
  configure_cmake.sh script.  It will automatically create and populate
  a new subdirectory named 'build'.

    cd /path/to/Snort++
    ./configure_cmake.sh --prefix=/home/rcombs/install

* Build with Xcode like this:

    mkdir -p /path/to/my_build
    cd /path/to/my_build
    Cmake /path/to/Snort++ -G Xcode

* An alternate method for building with Xcode is to run the
  configure_cmake.sh script.  It will automatically create and populate
  a new directory named 'build'.

    cd /path/to/Snort++
    ./configure_cmake --generator=Xcode --prefix=/home/rcombs/install


=== Using Lua

* Snort++ needs a lua conf.  use $install_dir/conf/snort.lua, like -c
   $install_dir/conf/snort.lua.

* lua/snort.lua is always the latest working example configuration.

* You need to export LUA_PATH=$install_dir/include/snort/lua/?.lua\;\;

* In addition to LUA_PATH which is required to get to the load scripts,
  you can export SNORT_LUA_PATH to allow dofile() loading of
  classification.lua etc. w/o hard coding the path in snort.lua.

* Or you may edit snort.lua to set the path to classification.lua and
  reference.lua.

* 'Classic' rules and includes must be put in ips.include = 'filename'
  and/or ips.rules = 'string' or [[ multi line string ]].  

* You can also use Snort2Lua to convert your Snort classic conf file into a
  Snort++ lua file.

* You can override or add to your lua config with the --lua command line
  option.  You can even add rules to your config via the command line.

* The Lua config is a 'live' script that is executed when loaded.  You can
  add functions, grab environment variables, compute values, etc.
  
* By default, symbols unknown to Snort++ are silently ignored.  You can
  generate warnings for with --warn-unknown.  Adding --pedantic makes them
  fatal.  To ignore such symbols, export them in the environment variable
  SNORT_IGNORE.

* You can also rename symbols that you want to disable.  For example,
  changing normalizer to Xnormalizer will disable the normalizer.  This can
  be easier than commenting in some cases.

=== Running

* Use snort --help for an overview of the help available.

* Load plugins from the command line with --plugin-path /path/to/install/lib.

* Snort++ tries hard not to error out too quickly.  It will report multiple
  semantic errors.  It always assumes the simplest mode of operation.

* You can process multiple sources at one time by using the -z or
  --max-threads option.

* Unit tests are configured with --enable-unit-tests (libcheck is
  required).  They can then be run with snort --unit-test [<mode>] where mode
  is a libcheck print_mode (silent, minimal, normal, etc.).


=== Help

----
include::help.txt[]
----


=== Common Errors

include::errors.txt[]


=== Gotchas

* A nil key in a table will not caught.  Neither will a nil value in a
  table.  Neither of the following will cause errors, nor will they 
  actually set http_server.post_depth:

    http_server = { post_depth }
    http_server = { post_depth = undefined_symbol }

* It is not an error to set a value multiple times.  The actual value
  applied may not be the last in the table either.  It is best to avoid
  such cases.

    http_server =
    {
        post_depth = 1234,
        post_depth = 4321
    }

* Snort can't tell you the exact filename or line number of a semantic
  error but it will tell you the fully qualified name.

