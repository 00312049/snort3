The following pointers will help you get started:


=== Dependencies

Required:

* autotools or cmake to build from source

* g\++ >= 4.8 or other recent C++11 compiler

* daq from http://www.snort.org for packet IO

* dnet from http://code.google.com/p/libdnet/ for network utility functions

* LuaJIT from http://luajit.org for configuration and scripting

* pcap from http://www.tcpdump.org for tcpdump style logging

* pcre from http://www.pcre.org for regular expression pattern matching

* zlib from http://www.zlib.net for decompression

* pkgconfig from http://www.freedesktop.org to build the example plugins

Optional:

* asciidoc from http://www.methods.co.nz/asciidoc/ to build the HTML
  manual

* dblatex from http://dblatex.sourceforge.net to build the pdf manual (in
  addition to asciidoc)

* check from http://check.sourceforge.net to build unit tests


=== Building

* Optionally built features are listed in the reference section.

* Create an install path:

    export my_path=/path/to/snorty
    mkdir -p $my_path

* If you are using a github clone with autotools, do this:

    autoreconf -isvf

* Now do one of the following:

a. To build with autotools, simply do the usual from the top level directory:

    ./configure --prefix=$my_path
    make -j 8
    make install

b. To build with cmake and make, run configure_cmake.sh.  It will
   automatically create and populate a new subdirectory named 'build'.

    ./configure_cmake.sh --prefix=$my_path
    cd build
    make -j 8
    make install
    ln -s $my_path/conf $my_path/etc

c. You can also specify a cmake project generator or use ccmake:

    ./configure_cmake --generator=Xcode --prefix=$my_path


=== Run

First set up the environment:

    export LUA_PATH=$my_path/include/snort/lua/\?.lua\;\;
    export SNORT_LUA_PATH=$my_path/etc

Then give it a go:

* Get some help:

    $my_path/bin/snort --help
    $my_path/bin/snort --help-module suppress
    $my_path/bin/snort --help-config | grep thread

* Examine and dump a pcap:

    $my_path/bin/snort -r <pcap>
    $my_path/bin/snort -K text -d -e -q -r <pcap>

* Verify config, with or w/o rules:

    $my_path/bin/snort -c $my_path/etc/snort.lua
    $my_path/bin/snort -c $my_path/etc/snort.lua -R $my_path/etc/sample.rules

* Run IDS mode.  To keep it brief, look at the first n packets in each file:

    $my_path/bin/snort -c $my_path/etc/snort.lua -R $my_path/etc/sample.rules \
        -r <pcap> -A alert_test -n 100000

* Let's suppress 1:2123.  We could edit the conf or just do this:

    $my_path/bin/snort -c $my_path/etc/snort.lua -R $my_path/etc/sample.rules \
        -r <pcap> -A alert_test -n 100000 --lua "suppress = { { gid = 1, sid = 2123 } }"

* Go whole hog on a directory with multiple packet threads:

    $my_path/bin/snort -c $my_path/etc/snort.lua -R $my_path/etc/sample.rules \
        --pcap-filter \*.pcap --pcap-dir <dir> -A alert_fast -n 1000 --max-packet-threads 8


=== Tips

* Legacy rules and includes must be put in ips.include = 'filename'
  and/or ips.rules = 'string' or [[ multi line string ]].  

* You can also use snort2lua to convert your legacy Snort conf file into a
  Snort++ lua file.

* You can override or add to your lua config with the --lua command line
  option.  You can even add rules to your config via the command line.

* The Lua config is a 'live' script that is executed when loaded.  You can
  add functions, grab environment variables, compute values, etc.
  
* By default, symbols unknown to Snort++ are silently ignored.  You can
  generate warnings for with --warn-unknown.  Adding --pedantic makes them
  fatal.  To ignore such symbols, export them in the environment variable
  SNORT_IGNORE.

* You can also rename symbols that you want to disable.  For example,
  changing normalizer to Xnormalizer will disable the normalizer.  This can
  be easier than commenting in some cases.

* Load plugins from the command line with --plugin-path /path/to/install/lib.

* Snort++ tries hard not to error out too quickly.  It will report multiple
  semantic errors.  It always assumes the simplest mode of operation.

* You can process multiple sources at one time by using the -z or
  --max-threads option.

* Unit tests are configured with --enable-unit-tests (libcheck is
  required).  They can then be run with snort --unit-test [<mode>] where mode
  is a libcheck print_mode (silent, minimal, normal, etc.).


=== Help

----
include::help.txt[]
----


=== Common Errors

include::errors.txt[]


=== Gotchas

* A nil key in a table will not caught.  Neither will a nil value in a
  table.  Neither of the following will cause errors, nor will they 
  actually set http_server.post_depth:

    http_server = { post_depth }
    http_server = { post_depth = undefined_symbol }

* It is not an error to set a value multiple times.  The actual value
  applied may not be the last in the table either.  It is best to avoid
  such cases.

    http_server =
    {
        post_depth = 1234,
        post_depth = 4321
    }

* Snort can't tell you the exact filename or line number of a semantic
  error but it will tell you the fully qualified name.

* The dump DAQ will not work with multiple threads unless you use --daq-var
  file=/dev/null.  This will be fixed in at some point to use the Snort log
  directory, etc.

