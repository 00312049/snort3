The following pointers will help you get started:

=== Building

* You need luajit from luajit.org; build from source.

* You should build Snort++ with --prefix $install_dir where install_dir is
  something you can easily delete.

* If you want to build the documentation, you will need to install
  asciidoc.  You will also need dblatex to build the pdf manual.

* To build with cmake and make, first create a separate directory for the
  build and cd into that directory.  Then:

    mkdir -p /path/to/my_build
    cd /path/to/my_build
    cmake /path/to/Snort++

* An alternate method for building with cmake and make is to run the
  configure_cmake.sh script.  It will automatically create and populate
  a new subdirectory named 'build'.

    cd /path/to/Snort++
    ./configure_cmake.sh --prefix=/home/rcombs/install

* Build with Xcode like this:

    mkdir -p /path/to/my_build
    cd /path/to/my_build
    cmake /path/to/Snort++ -G Xcode

* An alternate method for building with xcode is to run the
  configure_cmake.sh script.  It will automatically create and populate
  a new durectory named 'build'.

    cd /path/to/Snort++
    ./configure_cmake --generator=Xcode --prefix=/home/rcombs/install


=== Using Lua

* Snort++ needs a lua conf.  use $install_dir/conf/snort.lua, like -c
   $install_dir/conf/snort.lua.

* lua/snort.lua is always the latest working example configuration.

* You need to export LUA_PATH=$install_dir/include/snort/lua/?.lua\;\;

* In addition to LUA_PATH which is required to get to the load scripts,
  you can export SNORT_LUA_PATH to allow dofile() loading of
  classification.lua etc. w/o hard coding the path in snort.lua.

* Or you may edit snort.lua to set the path to classification.lua and
  reference.lua.

* 'Classic' rules and includes must be put in ips.include = 'filename'
  and/or ips.rules = 'string' or [[ multi line string ]].  

* You can also use snort2lua to convert your Snort classic conf file into a
  Snort++ lua file.

* You can override or add to your lua config with the --lua command line
  option.  You can even add rules to your config via the command line.

* The Lua config is a 'live' script that is executed when loaded.  You can
  add functions, grab environment variables, compute values, etc.  Symbols
  unknown to Snort++ are silently ignored.


=== Running

* Use snort --help! for an overview of the help available.

* Load plugins from the command line with --plugin-path /path/to/install/lib.

* Snort++ tries hard not to error out too quickly.  It will report multiple
  semantic errors.  It always assumes the simplest mode of operation.

* You can process multiple sources at one time by using the -z or
  --max-threads option.

* Unit tests are configured with --enable-unit-tests (libcheck is
  required).  They can then be run with snort --unit-test [<mode>] where mode
  is a libcheck print_mode (silent, minimal, normal, etc.).


=== Extending

* Snort++ has several types of plugins.  extra/README explains how to build
  the example plugins.

* You can code your plugins in C++ by using the examples as a template.

* Snort classic dynamic libraries are NOT compatible with Snort++.

* Snort classic SO rules are likewise not compatible with Snort++.


=== Gotchas

* A table with a nil key will not caught, eg: 

    stream_tcp = { show_rebuilt_packets }

* Snort can't tell you the exact filename or line number of a semantic
  error but it will tell you the fully qualified name.

