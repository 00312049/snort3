The following pointers will help you get started:

=== Using git

* for help do:

    git --help
    git <command> --help

* create a git repo called Snort++ in your working directory:

    git clone /nfs/home/rcombs/Snort++

* check the status of your repo and files:

    git status

* add a remote repo:

    git remote add <name> <username>@<host>:/nfs/home/rcombs/Snort++

* check the status of your remotes:

    git remote -v

* add new files to the repo:

    git add <files>

* stage changed file for commit:

    git add -u 

* commit staged files:

    git commit -m 'description'

* pull changes from a remote:

    git pull <name>

* push changes to remote:

    git push <name>
    git push <username>@<host>:Snort++

* create a branch and switch to it:

    git branch -a brname
    git checkout brname

* commit branch and then merge branch into head:

    git add -u
    git commit -m 'why'
    git checkout master
    git merge brname

=== Building

* you need luajit from luajit.org; build from source.

* you should build Snort++ with --prefix $install_dir where install_dir is
  something you can easily delete.

* don't try to build the control socket, it is broken.  I'll fix it but it
  but really plan to delete it.

* here are the configure options I typically use for reference:

    ./configure --enable-inline-init-failopen --enable-option-checking=fatal
        --enable-pthread --with-libpcap-includes=/usr/local/include
        --with-libpcap-libraries=/usr/local/lib
        --with-dnet-includes=/usr/local/include
        --with-dnet-libraries=/usr/local/lib --enable-sourcefire
        --with-luajit-includes=/usr/local/include/luajit-2.0
        --with-luajit-libraries=/usr/local/lib --enable-non-ether-decoders
        --enable-ha --prefix=/home/rcombs/install --enable-debug
        --enable-debug-msgs

* examples/README explains how to build the example plugins.

* if you want to build the documentation, you will need to install
  asciidoc.  you will also need dblatex to build the pdf manual.

* to build with cmake and make, first create a separate directory for the
  build and cd into that directory.  then:

    cd Snort++
    mkdir Cbuild
    cd Cbuild
    ccmake
    cmake ..

* build with Xcode, do this:

    cd Snort++
    mkdir Xcode
    cd Xcode
    cmake .. -G Xcode
    open snort.xcodeproj

=== Using Lua

* Snort++ needs a lua conf.  use $install_dir/conf/snort.lua, like -c
   $install_dir/conf/snort.lua.

* lua/snort.lua is always the latest working example configuration.

* you need to export LUA_PATH=$install_dir/include/snort/lua/?.lua\;\;

* In addition to LUA_PATH which is required to get to the load scripts,
  you can export SNORT_LUA_PATH to allow dofile() loading of
  classification.lua etc. w/o hard coding the path in snort.lua.

* or you may edit snort.lua to set the path to classification.lua and
  reference.lua.

* not everything in the conf is converted to Lua yet, in particular, not
  inspetors.

* 'classic' preprocessors must be put in legacy = 'filename'.  they will
  eventually be moved to the Lua config.

* 'classic' rules and includes must be put in ips.include = 'filename'
  and/or ips.rules = 'string' or [[ multi line string ]].  

=== Running

* unit tests are configured with --enable-unit-tests (libcheck is
  required).  They can then be run with snort --unit-test [<mode>] where mode
  is a libcheck print_mode (silent, minimal, normal, etc.).

* use snort --help to list command line options
  the optional option, or option prefix, will restrict output to only
  matching options.

* use snort --help-config [<module>] to list configuration options
  the optional module, or module prefix, will restrict output to only
  matching modules.

* use snort --help-rules [<module>] or --help-module <module> to get info
  on rules or modules.

