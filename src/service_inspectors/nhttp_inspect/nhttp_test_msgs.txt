# Enter HTTP test message text as you want it to be presented to PAF.
#
# The easiest way to format is to put a blank line between message sections so that each message section is its own "paragraph".
# Within a paragraph the placement of new lines does not have any effect. Format a paragraph any way you are comfortable. Extra blank lines
# between paragraphs also do not have any effect.
#
# Lines beginning with # are comments. Lines beginning with @ are commands. This does not apply to lines in the middle of a paragraph.
#
# Command lines are left justified, lower case, with no whitespace:
#   @break resets HTTP Inspect data structures and begins a new test. Use it liberally to prevent unrelated tests from interfering with each other.
#   @request and @response set the message direction. Applies to subsequent sections until changed.
#   @bodyend and @chunkend set the final two characters of a body or chunk to "xy" or "\r\n".
#   @<decimal number> sets the test number and hence the test output file name. Applies to subsequent sections until changed. Don't reuse numbers.
#
# Escape sequences begin with '\'. They may be used within a paragraph or to begin a paragraph.
#   \r - carriage return
#   \n - linefeed
#   \t - tab
#   \\ - backslash
#   \# - #
#   \@ - @
#   \xnn or \Xnn - where nn is a two-digit hexadecimal number. Insert an arbitrary 8-bit number as the next character. a-f and A-F are both acceptable.
#   \/nnn/ - where nnn is a variable-length decimal number. Insert nnn octets of fill data. The fill characters are 'A' - 'Z' with the final two bytes
#            "xy" for a normal body and "\r\n" for a chunk.
#   \B, \C, and \T - bridge, cut, and TCP close. See below.

# The default procedure for separating data into segments for presentation to PAF is 1) whenever a paragraph ends (blank line) and 2) every MSS octets,
# where MSS is currently a source code constant set to 1460. The \C escape forces an immediate separation point even in the middle of a paragraph. It is
# useful for testing PAF where message segments often arrive in pieces. \B causes prevents the immediately following blank line(s) from causing a
# separation point. Data resumes with the next non-newline character as if there was no gap. This allows PAF to be tested with the end of a section and
# the beginning of the next section or message in the same packet. Commands and comments following \B are not allowed. Data must resume immediately
# following the blank lines.
#
# \T functions as \C but causes the TCP connection closed indication to be set. It only makes sense at the end of a paragraph. \C\T simulates a data
# packet subsequently followed by a close with no more data.


# ***********************************************************************************************
# Valid response start lines
@1001
@break
@response
HTTP/1.1 200 OK\r\n\r\n

@1002
@break
@response
HTTP/1.0 315 An example reason phrase with spaces\r\n\r\n

@1003
@break
@response
HTTP/2.0 100 minimum valid status code\r\n\r\n

@1004
@break
@response
HTTP/1.1 599 MAX\r\n\r\n

@1005
@break
@response
HTTP/1.1 502 I'm very long and contain punctuationabcdefghijklmnopqrstuvwxyz!@#$%^&*()-_=+`~![]{}1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghij
|\\;:'",<.>/?klmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstu vwxyz123 4567890abcdefghijklmnopqrstuvwxyz1234567890abcd
efghijklmnopqrstuvwxyz1234567890\r\n\r\n

@1006
@break
@response
HTTP/1.0 200 1\r\n\r\n

@1007
@break
@response
HTTP/1.1 301 \r\n\r\n

@1008
@break
@response
HTTP/1.1 560  \r\n\r\n

@1010
@break
@response
HTTP/1.1 111     \r\n\r\n

@1011
@break
@response
HTTP/1.1 234 qwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZ qwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDE{}[]
FGHIJKLMNOPQRSTUVWXYZ   qwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZ qwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZ qwertyuiopasdfghjklzxcv
bnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklz
xcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghj
klzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdf
ghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZ,.;'<>:"qwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwe
rtyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZqwertyuiopasdfghjklzxcvbnmABCDEFGHIJKLMNOPQRSTUVWXYZ
\r\n\r\n


# ***********************************************************************************************
# Invalid response start lines

@2001
@break
@response
HTTP/2.0 099 status-code too small\r\n\r\n

@2002
@break
@response
HTTP/1.1 600 status-code too large\r\n\r\n

@2003
@break
@response
HTTP/1.1 879 x\r\n\r\n

@2004
@break
@response
HTTP/1.1 000 x----------------------------------------------------------s\r\n\r\n

@2005
@break
@response
HTTP/1.1 999 \r\n\r\n

@2006
@break
@response
HTTP/0.9 401  aaa\r\n\r\n

@2007
@break
@response
HTTP/1.2 344 \r\n\r\n

@2008
@break
@response
HTTP/2.1 200 400\r\n\r\n

@2009
@break
@response
HTTP/8.0 500 HTTP/1.1\r\n\r\n

@2010
@break
@response
HTOP/1.1 378 :"<>;'m,.\r\n\r\n

@2011
@break
@response
hTTP/1.1 400 OK\r\n\r\n

@2012
@break
@response
HTT5/1.1 200 OK\r\n\r\n

@2013
@break
@response
H TP/1.1 588 OK\r\n\r\n

@2014
@break
@response
HTTP\\1.1 101 OK\r\n\r\n

@2015
@break
@response
HTTP/1.A 700 OK\r\n\r\n

@2016
@break
@response
HTTP/1.a 303 OK   \r\n\r\n

@2017
@break
@response
HTTP/k.1 400 OK\tok\r\n\r\n

@2018
@break
@response
HTTP/1;0 400 O K\r\n\r\n

@2019
@break
@response
HTTP/1.0 444 O\rK\r\n\r\n

@2020
@break
@response
HTTP/1.1 444 O\n K1234567890\r\n\r\n

@2021
@break
@response
HTTP/1.1 46 status code too short\r\n

@2022
@break
@response
HTTP/1.1 2001 status code too \x31 long\r\n

@2023
@break
@response
HTTP/1.1 +88 bad character in status code I\r\n\r\n

@2024
@break
@response
HTTP/1.1 5E8 bad character in status code\x20II\r\n\r\n

@2025
@break
@response
HTTP/1.1 56a bad character in status code III\r\n\r\n

@2026
@break
@response
HTTP/1.0 401 illegal nontext char\x00acter in reason phrase null\r\n\r\n

@2027
@break
@response
HTTP/1.0 401 illegal nontext character in reason\xFFphrase delete\r\n\r\n

@2028
@break
@response
HTTP/1.0 401 \x08illegal nontext character in reason phrase backspace\r\n\r\n


# ***********************************************************************************************
# Valid request start lines
@3001
@break
@request
MKREDIRECTREF / HTTP/2.0\r\n\r\n

@3002
@break
@request
BIND /1234567890?abcdef HTTP/1.1\r\n\r\n

@3003
@break
@request
GET /test/hi-there.txt HTTP/1.0\r\n\r\n

@3004
@break
@request
GET /URI/Absolute/Path/Example HTTP/1.1\r\n\r\n

@3005
@break
@request
GET /uri/aBSOLUTE/pATH/eXAMPLE?with-query HTTP/1.1\r\n\r\n

@3006
@break
@request
MKWORKSPACE /URI/Absolute/Path/Example#with-fragment HTTP/1.1\r\n\r\n

@3007
@break
@request
BPROPFIND /URI/Absolute/Path/Example?with_QUERY#AndAFragmentToo HTTP/1.1\r\n\r\n

@3008
@break
@request
GET /?with-query HTTP/1.1\r\n\r\n

@3009
@break
@request
ORDERPATCH /#with-fragment HTTP/1.1\r\n\r\n

@3010
@break
@request
UPDATEREDIRECTREF /?with_QUERY#AndAFragmentToo HTTP/1.1\r\n\r\n

@3011
@break
@request
VERYLONGUNKNOWNMETHODTEST /?# HTTP/1.1\r\n\r\n

@3012
@break
@request
LABEL /stuff?# HTTP/1.1\r\n\r\n

@3013
@break
@request
MKCALENDAR /*stufflotsandlotslotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsofstuff?1# HTTP/1.1\r\n\r\n

@3014
@break
@request
VERSION-CONTROL /*stufflotsandlotslotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsandlotsofstuff?#A HTTP/1.1\r\n\r\n

@3015
@break
@request
OPTIONS * HTTP/1.1\r\n\r\n

@3016
@break
@request
OPTIONS /*options/may/have?a*resource HTTP/1.1\r\n\r\n

@3017
@break
@request
CONNECT this.is.an.authority.com HTTP/1.1\r\n\r\n

@3018
@break
@request
CONNECT this.is.an.authority.with.a.port.com:8739 HTTP/1.1\r\n\r\n

@3019
@break
@request
GET http://iamahost.com/simple/example/of/a/path/ HTTP/1.1\r\n\r\n

@3020
@break
@request
GET HtTpS://1.2.3.4.5.a:6/abcdef/ghijklmnop/qrstuvwxyz/?thequery?fieldcontinues?until#afragme#arrives#1234 HTTP/1.1\r\n\r\n

# ***********************************************************************************************
# Invalid request start lines
@4001
@break
@request
GET http://sam\xC6plehost.%3d.com:65535/abcdef//ghijkl\x7F?%21%23%24%25%26%27%28%29%2a%2b%2c%2f%3a%3b%3d%3f%40%5b%5dallgoodescapeshere#1234567890%abaaa HTTP/1.1\r\n\r\n

@4002
@break
@request
GET http://hostname.com:0/abcde/fghijklmn/opqrstuvwxyz?%5D%5d%5B%5b%40%3F%3f%3D%3d%3B%3b%3A%3a%2F%2f%2C%2c%2B%2b%2A%2a%29%28%27%26%25%24%23%21#
1%5D2%5d3%5B4%5b5%406%3F7%3f8%3D9%3da%3Bb%3bc%3Ad%3ae%2Ff%2fg%2CA%2cB%2BC%2bD%2AE%2aF%29%28%27%26%25%24%23%21 HTTP/1.1\r\n\r\n

@4003
@break
@request
GET HTTP://longLONGlonglonglonglonglonglonglonglonglonglong.host.name.com:1/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789/
-_.~.._./?# HTTP/1.1\r\n\r\n

@4004
@break
@request
GET HTTPS://host%6Eamewith\xD3impr oper%25.characters.com:123/..?# HTTP/1.1\r\n\r\n

@4005
@break
@request
GET Ftp://%48%6F%53%74%4E%61%4d%2e%63%6F%6D:45678/./123/./456/./7890././.abcdef/ghijklmn///.//./.?# HTTP/1.1\r\n\r\n

@4006
@break
@request
GET a://\xe8hostname.com%25%22\x08:65535/./././././//././/?# HTTP/1.1\r\n\r\n

@4007
@break
@request
GET http\x00://hostname.com:65536/%2e%2f/%2E%2F%2E%2F%2E%2F%2f%2f%2fUVWXYZ__~_/%2E?# HTTP/1.1\r\n\r\n

@4008
@break
@request
GET \xFF://hostname.com:1000000000/..?# HTTP/1.1\r\n\r\n

@4009
@break
@request
GET ht tp://hostname.com/../?# HTTP/1.1\r\n\r\n

@4010
@break
@request
GET http://hostname.com/../../../../%2e%2e/.%2e%2f%2e./../bogus_directory///bogus-subdirectory%2F../../real_directory//
%54%61%72%67%03%65%74/./?# HTTP/1.1\r\n\r\n

@4011
@break
@request
GET http://hostname.com/1/2/../3//4/..///5/6/..//////////7/8abcdefghijklmnopqrstuvwxyz%25abcdefghijklmnopqrstuvwxyz%3D/
fa%6be/..?# HTTP/1.1\r\n\r\n

@4012
@break
@request
GET http://hostname.com/1\\2/../3/\\4/..\\//5/6/..///\\\\\\////7/8abcdefghijklmnopqrstuvwxyz%25abcdefghijklmnopqrstuvwxyz%3D\\
fa%6be\\..?# HTTP/1.1\r\n\r\n

@4013
@break
@request
GET http://hostname.com/?# HTTP/1.1\r\n\r\n

@4014
@break
@request
GET http://hostname.com/?# HTTP/1.1\r\n\r\n

@4015
@break
@request
GET http://hostname.com/?# HTTP/1.1\r\n\r\n


# ***********************************************************************************************
# Valid headers without body
@5001
@break
@request
GET /test/hi-there.htm HTTP/1.1\r\nAccept: text/*\r\nAccept-Language: en,fr\r\n\r\n

# Base example followed by whitespace variations before and after header field values.
# Varying whitespace in comma-separated fields.
@5002
@break
@request
GET / HTTP/1.1\r\nAccept: */*\r\nAccept-Language: en,en-us,de,is\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: Mozilla/4.0\r\n\t(compatible: MSIE 5.5;
 Windows NT 5.0)\r\nHost: www.ft.com\r\nConnection: Keep-Alive\r\n\r\n

@5003
# Whitespace variations before header values
@break
@request
GET / HTTP/1.1\r\nAccept:*/*\r\nAccept-Language: en, en-us,\tde,    is\r\nAccept-Encoding:\tgzip,deflate\r\nUser-Agent:\t\t\t\t\tMozilla/4.0\r\n (compatible: MSIE 5.5;
 Windows NT 5.0)\r\nHost:\t \t \t   \t\twww.ft.com\r\nConnection:               \t         Keep-Alive\r\n\r\n

@5004
# Whitespace variations after header values
@break
@request
GET / HTTP/1.1\r\nAccept: */* \r\nAccept-Language: en,\t\ten-us,\t de,\r\n is\t\r\nAccept-Encoding: gzip,\tdeflate         \r\nUser-Agent: Mozilla/4.0\r\n\t \r\n\t(compatible: MSIE 5.5;
 Windows NT 5.0)\t\t\t \t\t\r\nHost: www.ft.com   \t\r\n\t\t\r\nConnection: Keep-Alive \t \t \t\r\n\r\n

@5005
@break
@response
HTTP/2.0 200 OK\r\nContent-type: text/plain\r\nTransfer-Encoding: gzip,identity,compress,deflate,foo,chunked\r\n\r\n

@5006
@break
@response
HTTP/2.0 200 OK\r\nContent-type: text/plain\r\nTransfer-Encoding: gzip, identity, compress, deflate, foo, chunked\r\n\r\n

@5007
@break
@response
HTTP/2.0 200 OK\r\nContent-type: text/plain\r\nTransfer-Encoding: gzip\r\nTransfer-Encoding: identity\r\nTransfer-Encoding: compress\r\nTransfer-Encoding: deflate
\r\nTransfer-Encoding: foo\r\nTransfer-Encoding: chunked\r\n\r\n


# ***********************************************************************************************
# Invalid headers without body
@6001
@break
@request


# ***********************************************************************************************
# Valid Content-Length and body
@7001
@break
@bodyend
@response
HTTP/1.1 200 OK\r\nContent-type: \ttext/plain\t\r\nContent-LENGTH: 19\r\n\r\n
\/19/

@7002
@break
@bodyend
@response
HTTP/1.1 200 OK\r\nContent-type: \ttext/plain\t\r\nContent-LENGTH: 19\r\n\r\n
\/10/

@7003
@break
@bodyend
@response
HTTP/1.1 200 OK\r\nContent-type: \ttext/plain\t\r\nContent-LENGTH: 19\r\n\r\n

\/10/

@7004
@break
@bodyend
@response
HTTP/1.1 200 OK\r\nContent-type: \ttext/plain\t\r\nContent-LENGTH: 19\r\n\r\n

\/19/

@7005
@break
@bodyend
@response
HTTP/1.1 200 OK\r\n
Transfer-Encoding: identity\r\n
CoNtEnT-lEnGtH:16382\r\n
Content-type: text/plain\r\n
\r\n
\/800/

@7006
@break
@bodyend
@request
POST /body/in/a/request/ HTTP/1.1\r\n
Content-Length:16383\r\n
\r\n

\/1300/

@7007
@break
@bodyend
@request
POST /body/in/a/request/ HTTP/1.1\r\n
Content-Length:16384\r\n
\r\n
\/1/

@7008
@break
@bodyend
@response
HTTP/1.0 408 barely too big for one section\r\n
Content-Length:16385\r\n
\r\n

\/1/

@7009
@break
@bodyend
@response
HTTP/1.1 408 barely too big for two sections\r\n
Content-Length:32772\r\n
\r\n
\/2/

@7010
@break
@bodyend
@response
HTTP/1.1 408 more than eight sections\r\n
Content-Length:133072\r\n
\r\n

\/2/

# ***********************************************************************************************
# Invalid Content-Length
@8001
@break
@response
HTTP/2.0 200 Illegal zero length\r\nContent-type: \ttext/plain\t\r\nContent-LENGTH: 0\r\n\r\n

@8002
@break
@response
HTTP/1.1 200 Silly gigantic length\r\nContent-type: \ttext/plain\t\r\nContent-LENGTH: 12345678901
23456789\r\n\r\n


# ***********************************************************************************************
# Valid chunks
# Remember chunk lengths are required to be specified in hex
@9001
@break
@chunkend
@response
HTTP/1.1 208 Example with chunks\r\nTransfer-Encoding: chunked\r\n\r\n

64\r\n
\/100/

8A\r\n
\/60/

e6\r\n

\/1/

0\r\n

\r\n

@9002
@break
@chunkend
@request
POST /request/with/chunks HTTP/1.1\r\n
Content-Type:    text/plain\r\n
Transfer-Encoding: compress\r\n
Via: 1.1 proxy3.company.com\r\n
tRaNsFeR-eNcO\CdInG: cHuNkEd   \r\n
Accept: *\r\n
\r\n

1C320\r\n
\/1400/

1F40; testing-the-extension-feature\r\n
\/2/

13FFE;  \r\n

\/1460/

4000;\r\n
\/1460/

3FFF;\r\n

\/2/

3FFE\r\n
\/1454/

4001;\r\n
\/1/

00000;chunkextension=3\r\n

date: Sun, 01 Oct 2000 23:25:17 GMT\r\n
X-madeupdate: Mon, 02 Oct 2000 23:25:17 GMT\r\n
Accept-Language: en,  de\r\n
Accept-Language: is\r\n
\r\n

# ***********************************************************************************************
# Invalid chunks
@10001
@break
@request



# ***********************************************************************************************
# Valid trailers
@11001
@break
@request



# ***********************************************************************************************
# Invalid trailers
@12001
@break
@request



# ***********************************************************************************************
# Valid request-response pairs
@13001
@break
@request








